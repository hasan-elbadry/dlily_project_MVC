@using dlily_project.DAL.Models.Users;
@model List<Tourgide>

@{
    ViewData["Title"] = "Tour Guides";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

    <style>
        /* Add loading overlay styles */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            transition: opacity 0.3s ease;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        :root {
            --primary: #2C3E50;
            --secondary: #3498DB;
            --accent: #E74C3C;
            --text: #34495E;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', sans-serif;
        }

        body {
            background: #ECF0F1;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .filters {
            margin: 6rem 0 3rem 0;
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
            margin-bottom: 2rem;
        }

        .filter-group {
            position: relative;
        }

        .search-input {
            width: 100%;
            padding: 0.8rem 1rem;
            border: 2px solid #BDC3C7;
            border-radius: 8px;
            font-size: 1rem;
        }

        /* Guide Grid */
        .guide-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 2rem;
            padding:2rem;
        }

        .guide-card {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
            transition: transform 0.3s ease;
            position: relative;
        }

            .guide-card:hover {
                transform: translateY(-5px);
            }

        .guide-header {
            position: relative;
        }

        .guide-photo {
            width: 100%;
            height: 250px;
            border-radius: 12px 12px 0 0;
        }

        .badge {
            position: absolute;
            top: 1rem;
            left: 1rem;
            background: var(--accent);
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
        }

        .guide-content {
            padding: 1.5rem;
        }

        .guide-name {
            font-size: 1.25rem;
            color: var(--primary);
            margin-bottom: 0.5rem;
        }

        .guide-rating {
            color: #F1C40F;
            margin-bottom: 1rem;
        }

        .guide-details {
            margin: 1rem 0;
            color: var(--text);
        }

        .detail-item {
            display: flex;
            align-items: center;
            margin: 0.5rem 0;
            gap: 0.75rem;
        }

        .languages {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin: 1rem 0;
        }

        .language-tag {
            background: #EBF5FB;
            color: var(--secondary);
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.85rem;
        }



        .guide-footer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid #ECF0F1;
        }

        .price {
            color: var(--primary);
            font-weight: bold;
            font-size: 1.1rem;
        }

        .contact-btn {
            background: var(--secondary);
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background 0.3s;
        }

            .contact-btn:hover {
                background: #2980B9;
            }

        .iframe-overlay {
           margin-top:30px;
            position: fixed;
            border-radius: 20px;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .iframe-container {
            width: 90%;
            max-width: 1000px;
            height: 85vh;
            border-radius: 20px;
            background: white;
            position: relative;
            transform: scale(0.95);
            transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        }
        .guideFrame
        {
            border-radius: 20px;
            width: 100%;
            height: 100%;
        }

        .checkout-btn {
            background: #27ae60;
            color: white;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background 0.3s;
            margin-left: 0.5rem;
        }

            .checkout-btn:hover {
                background: #219a52;
            }

        .action-buttons {
            display: flex;
            gap: 0.5rem;
        }
    </style>
</head>
<body>
    <div class="loading-overlay" id="loadingOverlay">
        <div class="spinner"></div>
    </div>

    <div class="container">
        <div class="filters">
            <div class="filter-group">
                <input type="text" class="search-input" placeholder="Search guides..." id="searchInput">
            </div>
            <div class="filter-group">
                <select class="search-input" id="languageFilter">
                    <option value="">All Languages</option>
                    <option>English</option>
                    <option>Spanish</option>
                    <option>French</option>
                </select>
            </div>
        </div>

        <div class="guide-grid">
            @if (Model != null && Model.Any())
            {
                @foreach (var guide in Model)
                {
                    <div class="guide-card" data-languages="@guide.SpokenLanguage.ToLower()">
                        <div class="guide-header">
                            <img src="@(guide.ProfilePicture != null && guide.ProfilePicture.Length > 0
        ? $"data:image/png;base64,{Convert.ToBase64String(guide.ProfilePicture)}"
        : "/images/placeholder.jpg")"
                                 class="guide-photo"
                                 alt="@guide.Name">
                        </div>
                        <div class="guide-content">
                            <h3 class="guide-name">@guide.Name</h3>
                            <div class="guide-rating">
                                @{
                                    var fullStars = (int)guide.Rating;
                                    var hasHalfStar = guide.Rating - fullStars >= 0.5;
                                }
                                @for (int i = 0; i < fullStars; i++)
                                {
                                    <i class="fas fa-star"></i>
                                }
                                @if (hasHalfStar)
                                {
                                    <i class="fas fa-star-half-alt"></i>
                                }
                                <span>(@guide.Rating.ToString("0.0"))</span>
                            </div>
                            <div class="languages">
                                @foreach (var lang in guide.SpokenLanguage.Split(','))
                                {
                                    <span class="language-tag">@lang.Trim()</span>
                                }
                            </div>
                            <div class="guide-details">
                                <p>@guide.Description</p>
                            </div>
                            <div class="guide-footer" data-guide-email="@guide.Email">
                                <span class="price">@(guide.Price * 10)/day</span>
                                <button class="checkout-btn" data-id="@guide.Id" data-image="@(guide.ProfilePicture != null && guide.ProfilePicture.Length > 0 ? Convert.ToBase64String(guide.ProfilePicture) : "")">Checkout</button>

                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>No tour guides found.</p>
            }
        </div>
       
    </div>

    <div id="modalOverlay" class="iframe-overlay" style="display: none;">
        <div class="iframe-container">
            <iframe id="guideFrame" src="" frameborder="0" class="guideFrame"></iframe>
        
        </div>
    </div>

    <script>

        window.addEventListener('load', () => {
            document.getElementById('loadingOverlay').style.opacity = '0';
            setTimeout(() => {
                document.getElementById('loadingOverlay').style.display = 'none';
            }, 300);
        });

        document.getElementById('searchInput').addEventListener('input', filterGuides);
        document.getElementById('languageFilter').addEventListener('change', filterGuides);

        function filterGuides() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const languageFilter = document.getElementById('languageFilter').value.toLowerCase();

            document.querySelectorAll('.guide-card').forEach(card => {
                const name = card.querySelector('.guide-name').textContent.toLowerCase();
                const languages = card.dataset.languages;

                const nameMatch = name.includes(searchTerm);
                const languageMatch = !languageFilter || languages.includes(languageFilter);

                card.style.display = (nameMatch && languageMatch) ? 'block' : 'none';
            });
        }


    </script>
  
    <script src="https://cdn.livechatinc.com/widget.js" async></script>

    <div>
        <script>
            // const encodedToken = "YmQ4MDZhMzYtMGE3Ny00ZDJiLWEwYWUtZTY1YmM4N2U1M2M3OmRhbDpsanFVeVRZQTVwSTgxSGFydHdQMXRsNTROWUk=";

            const encodedToken = "ZmU4NmMwN2ItYjNkYS00NDYxLTgwOWYtYTk5ZjAxMDliNTc0OmRhbDpwRUdjcVNPZXUzYTdHUWprbEFBbHF4eGFreVU=";
            async function fetchTourGuides() {
                try {
                    const response = await fetch("/TourGuide/GetTourGuide");
                    if (!response.ok) throw new Error("❌ Failed to fetch tour guides data");

                    const guides = await response.json();
                    console.log("✅ Retrieved tour guides:", guides);
                    return guides;
                } catch (error) {
                    console.error("❌ Error while fetching tour guides:", error);
                    return [];
                }
            }
            function extractNameFromEmail(email) {
                return email.match(/[a-zA-Z]+/g)?.join(" ") || "Unknown Guide";
            }

            async function addAgent(tourGuideEmail) {

                try {
                    let defaultName = extractNameFromEmail(tourGuideEmail);
                    const response = await fetch("https://api.livechatinc.com/v3.5/configuration/action/create_agent", {
                        method: "POST",
                        headers: {
                            "Authorization": `Basic ZmU4NmMwN2ItYjNkYS00NDYxLTgwOWYtYTk5ZjAxMDliNTc0OmRhbDpwRUdjcVNPZXUzYTdHUWprbEFBbHF4eGFreVU=`,  // تأكد من أن التوكن محدث بصلاحيات مناسبة
                            "Content-Type": "application/json"

                        },
                        body: JSON.stringify({
                            "id": tourGuideEmail,  // استخدم الإيميل كـ ID
                            "name": defaultName, // استخدم الجزء الأول من الإيميل كاسم افتراضي
                            "role": "normal",
                            "avatar": "",
                            "login_status": "accepting chats",
                            "job_title": "Tour Guide",
                            "max_chats_count": 6
                        })
                    });

                    const result = await response.json();
                    if (response.ok) {
                        console.log(`✅ Agent added: ${tourGuideEmail}`);
                    } else {
                        console.error(`❌ Error adding agent (${tourGuideEmail}):`, result);
                    }
                } catch (error) {
                    console.error("⚠️ Error adding agent:", error);
                }
            }

            async function addAllAgents() {
                const tourGuides = await fetchTourGuideEmails();

                if (!tourGuides || tourGuides.length === 0) {
                    console.warn("⚠️ No tour guides found to add.");
                    return;
                }

                for (const guideEmail of tourGuides) {
                    await addAgent(guideEmail);
                    extractNameFromEmail(guideEmail)
                }
            }

            // استدعاء الدالة لإضافة الوكلاء
            addAllAgents();



            addAllAgents();
            async function fetchTourGuideEmails() {
                try {
                    const response = await fetch("/TourGuide/GetTourGuideEmails");
                    if (!response.ok) throw new Error("❌ Failed to fetch tour guides data");

                    const guides = await response.json();
                    console.log("✅ Retrieved tour guides:", guides);
                    return guides;
                } catch (error) {
                    console.error("❌ Error while fetching tour guides:", error);
                    return [];
                }
            }
            async function getAgents() {
                try {
                    const response = await fetch("https://api.livechatinc.com/v3.5/configuration/action/list_agents", {
                        method: "POST",
                        headers: {
                            "Authorization": `Basic ${encodedToken}`,
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({})
                    });

                    const responseText = await response.text();
                    console.log("🔍 Raw API response:", responseText);

                    if (!response.ok) throw new Error(`❌ Error fetching agents: ${response.status} ${response.statusText}`);

                    const data = JSON.parse(responseText);
                    console.log("✅ Retrieved LiveChat data:", data);
                    const normalAgents = data.filter(agent => agent.role === "normal");

                    console.log("🟢 Agents with role === 'normal':", normalAgents);
                    return normalAgents;
                } catch (error) {
                    console.error("❌ Error while fetching LiveChat agents:", error);
                    return [];
                }
            }

            window.mapTourGuidesWithAgents = async function () {
                try {
                    const guides = await fetchTourGuideEmails();
                    const agents = await getAgents();

                    document.querySelectorAll(".guide-footer").forEach(div => {
                        const guideEmail = div.dataset.guideEmail;
                        if (!guideEmail) return;

                        const agent = agents.find(a => a?.id?.toLowerCase() === guideEmail.toLowerCase());

                      
                        if (!div.querySelector('.contact-btn')) {
                            const button = document.createElement('button');
                            button.textContent = 'Contact';
                            button.classList.add('contact-btn');
                            button.onclick = () => openModal(guideEmail);

                            if (!agent) {
                                button.disabled = true;
                                button.title = "Guide is currently unavailable";
                            }

                            div.appendChild(button);
                        }
                    });
                } catch (error) {
                    console.error("Error in mapTourGuidesWithAgents:", error);
                }
            };


            window.openModal = function openModal(agentEmail) {
                const overlay = document.getElementById('modalOverlay');
                const iframe = document.getElementById('guideFrame');

                if (!overlay || !iframe) {
                    console.error("❌ العنصر `modalOverlay` أو `guideFrame` غير موجود في DOM!");
                    return;
                }

                if (!agentEmail) {
                    console.error("❌ لم يتم تمرير بريد إلكتروني صحيح!");
                    return;
                }

                iframe.src = `/TourGuide/GuideProfile?id=${encodeURIComponent(agentEmail)}`;
                overlay.style.display = 'flex';
            };

            window.closeModal = function closeModal() {
                const overlay = document.getElementById('modalOverlay');
                overlay.style.display = 'none';
                document.getElementById('guideFrame').src = 'about:blank';
            }


            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') closeModal();
            });

            document.addEventListener("DOMContentLoaded", () => {
                mapTourGuidesWithAgents();
            });

            window.addEventListener("DOMContentLoaded", function () {
                const checkLiveChat = setInterval(() => {
                    if (window.LiveChatWidget) {
                        clearInterval(checkLiveChat);
                        window.LiveChatWidget.on('ready', function () {
                            console.log("✅ LiveChatWidget is ready to use!");
                        });
                    } else if (window.__lc) {
                        clearInterval(checkLiveChat);
                        console.log("✅ LiveChat is loading but LiveChatWidget is not ready yet.");
                    }
                }, 500); 
            });


        </script>
        <!-- Tour Guides View (add this script) -->
  
       

        <script>
                        document.querySelectorAll('.checkout-btn').forEach(button => {
                button.addEventListener('click', function () {
                    const guide = {
                        id: this.dataset.id,
                        image: this.dataset.image, // Base64-encoded image string
                        name: this.closest('.guide-card').querySelector('.guide-name').textContent,
                        price: parseFloat(this.closest('.guide-footer').querySelector('.price').textContent.match(/\d+/)[0])
                    };

                    console.log(guide.image); // Debugging: Check the image data

                    const cart = JSON.parse(localStorage.getItem('cart') || '[]');
                    cart.push(guide);
                    localStorage.setItem('cart', JSON.stringify(cart));

                    Swal.fire({
                        icon: 'success',
                        title: 'Added to Cart!',
                        text: `${guide.name} added successfully`,
                        timer: 5000, // 5 seconds (5000 milliseconds)
                        showConfirmButton: true
                    }).then(() => {
                        // Redirect to the cart page after the SweetAlert timer ends
                        window.location.href = '@Url.Action("Cart", "Cart")';
                    });
                });
            });
        </script>

    </div>
</body>
</html>