@{
    ViewData["Title"] = "Shopping Cart";
}
<style>
    body {
        padding-top: 2rem;
    }

    .product-image {
        max-width: 100px;
        height: auto;
        border-radius: 8px;
    }

    .cart-item {
        transition: transform 0.2s;
    }

        .cart-item:hover {
            transform: scale(1.02);
        }

    .remove-btn {
        cursor: pointer;
    }

    .empty-state-icon {
        font-size: 5rem;
        color: #6c757d;
    }
</style>
<div class="container py-5">
    <!-- Cart Items Section -->
    <div id="cart-container">
        <div id="cart-items" class="row g-4 mb-4"></div>

        <!-- Empty Cart Message -->
        <div id="empty-cart-message" class="text-center d-none">
            <div class="empty-state-icon mb-4">
                <i class="bi bi-cart-x"></i>
            </div>
            <h3 class="mb-3">Your Cart Feels Lonely</h3>
            <a href="@Url.Action("Index", "Home")" class="btn btn-primary btn-lg px-5">
                <i class="bi bi-arrow-left me-2"></i>Find Gear
            </a>
        </div>

        <!-- Cart Summary -->
        <div id="cart-summary" class="card border-0 shadow-lg d-none">
            <div class="card-body p-4">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h4 class="mb-0 text-dark">Total:</h4>
                    <h2 id="total-price" class="mb-0 text-success">$0.00</h2>
                </div>
                <div id="paypal-button-container" class="mt-4"></div>
                <div class="mt-4 text-center">
                    <small class="text-muted">Secure checkout processed by</small>
                    <img src="https://www.paypalobjects.com/webstatic/mktg/logo/pp_cc_mark_37x23.jpg"
                         class="ms-2" alt="PayPal Logo" style="height: 23px;">
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://www.paypal.com/sdk/js?client-id=AWkIHQeACTJbHcq1plYgjtwj2fObzE0p6LMLnTnLjtJb8E2FqrtRfe4UdbwvjDX9Z8CWBTXivcJ6oXpS&currency=USD"></script>
<script>
    const CartManager = {
        getCart: () => JSON.parse(localStorage.getItem('cart')) || [],

        updateCart: (cart) => {
            localStorage.setItem('cart', JSON.stringify(cart));
            CartManager.toggleUIState();
        },

        groupCartItems: (cart) => {
            const grouped = {};
            cart.forEach(item => {
                const key = item.id || item.name;
                grouped[key] = grouped[key] || { ...item, quantity: 0, total: 0 };
                grouped[key].quantity++;
                grouped[key].total += item.price;
                grouped[key].image = item.image; // Preserve the image property
            });
            return Object.values(grouped);
        },

        toggleUIState: () => {
            const cart = CartManager.getCart();
            document.getElementById('empty-cart-message').classList.toggle('d-none', cart.length > 0);
            document.getElementById('cart-summary').classList.toggle('d-none', cart.length === 0);
        }
    };

       function renderCartItems() {
        const cart = CartManager.getCart();
        const groupedCart = CartManager.groupCartItems(cart);
        const itemsContainer = document.getElementById('cart-items');

        itemsContainer.innerHTML = groupedCart.map(item => `
            <div class="col-12">
                <div class="cart-item card p-3">
                    <div class="row g-3 align-items-center">
                        <div class="col-md-2">
                        </div>
                        <div class="col-md-6">
                            <h5 class="mb-1">${item.name}</h5>
                            <div class="d-flex align-items-center gap-4 text-muted">
                                <div>$${item.price.toFixed(2)} each</div>
                            </div>
                        </div>
                        <div class="col-md-4 text-end">
                            <button class="btn btn-link text-danger remove-btn"
                                    data-action="remove" data-id="${item.id || item.name}">
                                X
                            </button>
                            <div class="mt-2">
                                <div class="text-dark fw-bold">$${item.total.toFixed(2)}</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `).join('');
    }

    function getImageHtml(image) {
        if (!image) {
            // If no image is provided, use a placeholder
            return `<img src="/images/placeholder-product.jpg" class="product-image" alt="Room Image">`;
        }
        if (image.startsWith('http') || image.startsWith('/')) {
            // If the image is a URL
            return `<img src="${image}" class="product-image" alt="Room Image">`;
        } else if (image.startsWith('data:image')) {
            // If the image is already a base64 data URL
            return `<img src="${image}" class="product-image" alt="Room Image">`;
        } else {
            // If the image is a base64-encoded string (without the data URL prefix)
            // Validate the base64 string
            if (/^[A-Za-z0-9+/]+={0,2}$/.test(image)) {
                return `<img src="data:image/jpeg;base64,${image}" class="product-image" alt="Room Image">`;
            } else {
                console.error("Invalid base64 image string:", image);
                return `<img src="/images/placeholder-product.jpg" class="product-image" alt="Room Image">`;
            }
        }
    }

    function updateTotalPrice() {
        const cart = CartManager.getCart();
        const total = cart.reduce((sum, item) => sum + item.price, 0);
        document.getElementById('total-price').textContent = `$${total.toFixed(2)}`;
    }

    function handleCartAction(event) {
        const action = event.target.dataset.action;
        const itemId = event.target.dataset.id;
        let cart = CartManager.getCart();

        if (action === 'remove') {
            cart = cart.filter(item => (item.id || item.name) !== itemId);
            CartManager.updateCart(cart);
            renderCartItems();
            updateTotalPrice();
        }
    }

    function initCart() {
        CartManager.toggleUIState();
        renderCartItems();
        updateTotalPrice();

        document.addEventListener('click', (e) => {
            if (e.target.closest('[data-action="remove"]')) {
                handleCartAction(e);
            }
        });

        paypal.Buttons({
            style: {
                layout: 'vertical',
                color: 'gold',
                shape: 'rect',
                label: 'checkout'
            },
            createOrder: (data, actions) => {
                const cart = CartManager.getCart();
                const total = cart.reduce((sum, item) => sum + item.price, 0);
                return actions.order.create({
                    purchase_units: [{
                        amount: {
                            value: total.toFixed(2),
                            currency_code: 'USD'
                        }
                    }]
                });
            },
            onApprove: (data, actions) => {
                return actions.order.capture().then(details => {
                    localStorage.removeItem('cart');
                    window.location.href = `/Order/Complete?transactionId=${details.id}`;
                });
            }
        }).render('#paypal-button-container');
    }

    document.addEventListener('DOMContentLoaded', initCart);
</script>