// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dlily_project.DAL;

#nullable disable

namespace dlily_project.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250209174536_add_websiteUrl_attribute")]
    partial class add_websiteUrl_attribute
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("dlily_project.DAL.Models.Offers.CompanyOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<string>("WebSiteUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyOffers");
                });

            modelBuilder.Entity("dlily_project.DAL.Models.Offers.HotelOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte[]>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<string>("WebSiteUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HotelOffers");
                });

            modelBuilder.Entity("dlily_project.DAL.Models.Reviews.ReviewCompany", b =>
                {
                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("TouristId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyOfferId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("CompanyId", "TouristId");

                    b.HasIndex("CompanyOfferId");

                    b.HasIndex("TouristId");

                    b.ToTable("ReviewCompanies");
                });

            modelBuilder.Entity("dlily_project.DAL.Models.Reviews.ReviewHotel", b =>
                {
                    b.Property<int>("HotelId")
                        .HasColumnType("int");

                    b.Property<int>("TouristId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyOfferId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("HotelOfferId")
                        .HasColumnType("int");

                    b.HasKey("HotelId", "TouristId");

                    b.HasIndex("CompanyOfferId");

                    b.HasIndex("HotelOfferId");

                    b.HasIndex("TouristId");

                    b.ToTable("ReviewHotels");
                });

            modelBuilder.Entity("dlily_project.DAL.Models.TouristPlaces", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<TimeSpan>("CloseAt")
                        .HasColumnType("time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("EntryFee")
                        .HasColumnType("float");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("OpenAt")
                        .HasColumnType("time");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("TouristPlaces");
                });

            modelBuilder.Entity("dlily_project.DAL.Models.Users.Tourgide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte>("Rating")
                        .HasColumnType("tinyint");

                    b.Property<string>("SpokenLanguage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tourgides");
                });

            modelBuilder.Entity("dlily_project.DAL.Models.Users.Tourist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SpokenLanguage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("TourgideId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TourgideId");

                    b.ToTable("Tourists");
                });

            modelBuilder.Entity("dlily_project.DAL.Models.Reviews.ReviewCompany", b =>
                {
                    b.HasOne("dlily_project.DAL.Models.Offers.CompanyOffer", "CompanyOffer")
                        .WithMany()
                        .HasForeignKey("CompanyOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dlily_project.DAL.Models.Users.Tourist", "Tourist")
                        .WithMany("ReviewCompanies")
                        .HasForeignKey("TouristId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyOffer");

                    b.Navigation("Tourist");
                });

            modelBuilder.Entity("dlily_project.DAL.Models.Reviews.ReviewHotel", b =>
                {
                    b.HasOne("dlily_project.DAL.Models.Offers.CompanyOffer", null)
                        .WithMany("ReviewHotels")
                        .HasForeignKey("CompanyOfferId");

                    b.HasOne("dlily_project.DAL.Models.Offers.HotelOffer", "HotelOffer")
                        .WithMany("ReviewHotels")
                        .HasForeignKey("HotelOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dlily_project.DAL.Models.Users.Tourist", "Tourist")
                        .WithMany("ReviewHotels")
                        .HasForeignKey("TouristId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HotelOffer");

                    b.Navigation("Tourist");
                });

            modelBuilder.Entity("dlily_project.DAL.Models.Users.Tourist", b =>
                {
                    b.HasOne("dlily_project.DAL.Models.Users.Tourgide", "Tourgide")
                        .WithMany("Tourists")
                        .HasForeignKey("TourgideId");

                    b.Navigation("Tourgide");
                });

            modelBuilder.Entity("dlily_project.DAL.Models.Offers.CompanyOffer", b =>
                {
                    b.Navigation("ReviewHotels");
                });

            modelBuilder.Entity("dlily_project.DAL.Models.Offers.HotelOffer", b =>
                {
                    b.Navigation("ReviewHotels");
                });

            modelBuilder.Entity("dlily_project.DAL.Models.Users.Tourgide", b =>
                {
                    b.Navigation("Tourists");
                });

            modelBuilder.Entity("dlily_project.DAL.Models.Users.Tourist", b =>
                {
                    b.Navigation("ReviewCompanies");

                    b.Navigation("ReviewHotels");
                });
#pragma warning restore 612, 618
        }
    }
}
